// Prisma schema for Economises Blog
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
  ADMIN
  EDITOR
  AUTHOR
  CONTRIBUTOR
  SUBSCRIBER
}

// Post status enum
enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

// Comment status enum
enum CommentStatus {
  PENDING
  APPROVED
  SPAM
  TRASH
}

// User model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  password  String
  firstName String?
  lastName  String?
  bio       String?
  avatar    String?
  role      UserRole @default(SUBSCRIBER)
  isActive  Boolean  @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts      Post[]
  comments   Comment[]
  media      Media[]

  @@map("users")
}

// Category model
model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  color       String?
  isActive    Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts Post[]

  @@map("categories")
}

// Tag model
model Tag {
  id       String @id @default(cuid())
  name     String @unique
  slug     String @unique
  color    String?
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts Post[]

  @@map("tags")
}

// Post model
model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  excerpt     String?
  content     String?
  featuredImage String?
  status      PostStatus @default(DRAFT)
  publishedAt DateTime?
  scheduledAt DateTime?

  // SEO fields
  metaTitle       String?
  metaDescription String?
  canonicalUrl    String?

  // Author
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  categories Category[]
  tags       Tag[]
  comments   Comment[]

  @@map("posts")
}

// Comment model
model Comment {
  id       String        @id @default(cuid())
  content  String
  status   CommentStatus @default(PENDING)
  authorName String?
  authorEmail String?

  // Relations
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  authorId String?
  author   User?  @relation(fields: [authorId], references: [id], onDelete: SetNull)

  parentId String?
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

// Media model
model Media {
  id          String @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  alt         String?
  caption     String?

  // Relations
  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("media")
}

// Settings model for site-wide configuration
model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}
